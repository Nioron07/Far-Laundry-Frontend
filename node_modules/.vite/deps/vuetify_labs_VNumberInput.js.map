{
  "version": 3,
  "sources": ["../../vuetify/src/labs/VNumberInput/VNumberInput.tsx"],
  "sourcesContent": ["// Styles\nimport './VNumberInput.sass'\n\n// Components\nimport { VBtn } from '../../components/VBtn'\nimport { VDefaultsProvider } from '../../components/VDefaultsProvider'\nimport { VDivider } from '../../components/VDivider'\nimport { makeVTextFieldProps, VTextField } from '@/components/VTextField/VTextField'\n\n// Composables\nimport { useForm } from '@/composables/form'\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, nextTick, onMounted, ref } from 'vue'\nimport { clamp, genericComponent, getDecimals, omit, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { VTextFieldSlots } from '@/components/VTextField/VTextField'\n\ntype ControlSlot = {\n  click: (e: MouseEvent) => void\n}\n\ntype VNumberInputSlots = Omit<VTextFieldSlots, 'default'> & {\n  increment: ControlSlot\n  decrement: ControlSlot\n}\n\ntype ControlVariant = 'default' | 'stacked' | 'split'\n\nconst makeVNumberInputProps = propsFactory({\n  controlVariant: {\n    type: String as PropType<ControlVariant>,\n    default: 'default',\n  },\n  inset: Boolean,\n  hideInput: Boolean,\n  modelValue: {\n    type: Number as PropType<Number | null>,\n    default: null,\n  },\n  min: {\n    type: Number,\n    default: Number.MIN_SAFE_INTEGER,\n  },\n  max: {\n    type: Number,\n    default: Number.MAX_SAFE_INTEGER,\n  },\n  step: {\n    type: Number,\n    default: 1,\n  },\n\n  ...omit(makeVTextFieldProps({}), ['appendInnerIcon', 'modelValue', 'prependInnerIcon']),\n}, 'VNumberInput')\n\nexport const VNumberInput = genericComponent<VNumberInputSlots>()({\n  name: 'VNumberInput',\n\n  props: {\n    ...makeVNumberInputProps(),\n  },\n\n  emits: {\n    'update:modelValue': (val: number) => true,\n  },\n\n  setup (props, { slots }) {\n    const _model = useProxiedModel(props, 'modelValue')\n\n    const model = computed({\n      get: () => _model.value,\n      set (val) {\n        if (val === null) {\n          _model.value = null\n          return\n        }\n\n        if (!isNaN(+val) && +val <= props.max && +val >= props.min) {\n          _model.value = +val\n        }\n      },\n    })\n\n    const vTextFieldRef = ref<VTextField | undefined>()\n\n    const stepDecimals = computed(() => getDecimals(props.step))\n    const modelDecimals = computed(() => typeof model.value === 'number' ? getDecimals(model.value) : 0)\n\n    const form = useForm()\n    const controlsDisabled = computed(() => (\n      props.disabled || props.readonly || form?.isReadonly.value\n    ))\n\n    const canIncrease = computed(() => {\n      if (controlsDisabled.value) return false\n      return (model.value ?? 0) as number + props.step <= props.max\n    })\n    const canDecrease = computed(() => {\n      if (controlsDisabled.value) return false\n      return (model.value ?? 0) as number - props.step >= props.min\n    })\n\n    const controlVariant = computed(() => {\n      return props.hideInput ? 'stacked' : props.controlVariant\n    })\n\n    const incrementIcon = computed(() => controlVariant.value === 'split' ? '$plus' : '$collapse')\n    const decrementIcon = computed(() => controlVariant.value === 'split' ? '$minus' : '$expand')\n    const controlNodeSize = computed(() => controlVariant.value === 'split' ? 'default' : 'small')\n    const controlNodeDefaultHeight = computed(() => controlVariant.value === 'stacked' ? 'auto' : '100%')\n\n    const incrementSlotProps = computed(() => ({ click: onClickUp }))\n\n    const decrementSlotProps = computed(() => ({ click: onClickDown }))\n\n    onMounted(() => {\n      if (!props.readonly && !props.disabled) {\n        clampModel()\n      }\n    })\n\n    function toggleUpDown (increment = true) {\n      if (controlsDisabled.value) return\n      if (model.value == null) {\n        model.value = clamp(0, props.min, props.max)\n        return\n      }\n\n      const decimals = Math.max(modelDecimals.value, stepDecimals.value)\n      if (increment) {\n        if (canIncrease.value) model.value = +((((model.value as number) + props.step).toFixed(decimals)))\n      } else {\n        if (canDecrease.value) model.value = +((((model.value as number) - props.step).toFixed(decimals)))\n      }\n    }\n\n    function onClickUp (e: MouseEvent) {\n      e.stopPropagation()\n      toggleUpDown()\n    }\n\n    function onClickDown (e: MouseEvent) {\n      e.stopPropagation()\n      toggleUpDown(false)\n    }\n\n    function onBeforeinput (e: InputEvent) {\n      if (!e.data) return\n      const existingTxt = (e.target as HTMLInputElement)?.value\n      const selectionStart = (e.target as HTMLInputElement)?.selectionStart\n      const selectionEnd = (e.target as HTMLInputElement)?.selectionEnd\n      const potentialNewInputVal =\n        existingTxt\n          ? existingTxt.slice(0, selectionStart as number | undefined) + e.data + existingTxt.slice(selectionEnd as number | undefined)\n          : e.data\n      // Only numbers, \"-\", \".\" are allowed\n      // AND \"-\", \".\" are allowed only once\n      // AND \"-\" is only allowed at the start\n      if (!/^-?(\\d+(\\.\\d*)?|(\\.\\d+)|\\d*|\\.)$/.test(potentialNewInputVal)) {\n        e.preventDefault()\n      }\n    }\n\n    async function onKeydown (e: KeyboardEvent) {\n      if (\n        ['Enter', 'ArrowLeft', 'ArrowRight', 'Backspace', 'Delete', 'Tab'].includes(e.key) ||\n        e.ctrlKey\n      ) return\n\n      if (['ArrowDown', 'ArrowUp'].includes(e.key)) {\n        e.preventDefault()\n        clampModel()\n        // _model is controlled, so need to wait until props['modelValue'] is updated\n        await nextTick()\n        if (e.key === 'ArrowDown') {\n          toggleUpDown(false)\n        } else {\n          toggleUpDown()\n        }\n      }\n    }\n\n    function onControlMousedown (e: MouseEvent) {\n      e.stopPropagation()\n    }\n\n    function clampModel () {\n      if (!vTextFieldRef.value) return\n      const inputText = vTextFieldRef.value.value\n      if (inputText && !isNaN(+inputText)) {\n        model.value = clamp(+(inputText), props.min, props.max)\n      } else {\n        model.value = null\n      }\n    }\n\n    useRender(() => {\n      const { modelValue: _, ...textFieldProps } = VTextField.filterProps(props)\n\n      function incrementControlNode () {\n        return !slots.increment ? (\n          <VBtn\n            disabled={ !canIncrease.value }\n            flat\n            key=\"increment-btn\"\n            height={ controlNodeDefaultHeight.value }\n            name=\"increment-btn\"\n            icon={ incrementIcon.value }\n            onClick={ onClickUp }\n            onMousedown={ onControlMousedown }\n            size={ controlNodeSize.value }\n            tabindex=\"-1\"\n          />\n        ) : (\n          <VDefaultsProvider\n            key=\"increment-defaults\"\n            defaults={{\n              VBtn: {\n                disabled: !canIncrease.value,\n                flat: true,\n                height: controlNodeDefaultHeight.value,\n                size: controlNodeSize.value,\n                icon: incrementIcon.value,\n              },\n            }}\n          >\n            { slots.increment(incrementSlotProps.value) }\n          </VDefaultsProvider>\n        )\n      }\n\n      function decrementControlNode () {\n        return !slots.decrement ? (\n          <VBtn\n            disabled={ !canDecrease.value }\n            flat\n            key=\"decrement-btn\"\n            height={ controlNodeDefaultHeight.value }\n            name=\"decrement-btn\"\n            icon={ decrementIcon.value }\n            size={ controlNodeSize.value }\n            tabindex=\"-1\"\n            onClick={ onClickDown }\n            onMousedown={ onControlMousedown }\n          />\n        ) : (\n          <VDefaultsProvider\n            key=\"decrement-defaults\"\n            defaults={{\n              VBtn: {\n                disabled: !canDecrease.value,\n                flat: true,\n                height: controlNodeDefaultHeight.value,\n                size: controlNodeSize.value,\n                icon: decrementIcon.value,\n              },\n            }}\n          >\n            { slots.decrement(decrementSlotProps.value) }\n          </VDefaultsProvider>\n        )\n      }\n\n      function controlNode () {\n        return (\n          <div class=\"v-number-input__control\">\n            { decrementControlNode() }\n\n            <VDivider\n              vertical={ controlVariant.value !== 'stacked' }\n            />\n\n            { incrementControlNode() }\n          </div>\n        )\n      }\n\n      function dividerNode () {\n        return !props.hideInput && !props.inset ? <VDivider vertical /> : undefined\n      }\n\n      const appendInnerControl =\n        controlVariant.value === 'split'\n          ? (\n            <div class=\"v-number-input__control\">\n              <VDivider vertical />\n\n              { incrementControlNode() }\n            </div>\n          ) : (!props.reverse\n            ? <>{ dividerNode() }{ controlNode() }</>\n            : undefined)\n\n      const hasAppendInner = slots['append-inner'] || appendInnerControl\n\n      const prependInnerControl =\n        controlVariant.value === 'split'\n          ? (\n            <div class=\"v-number-input__control\">\n              { decrementControlNode() }\n\n              <VDivider vertical />\n            </div>\n          ) : (props.reverse\n            ? <>{ controlNode() }{ dividerNode() }</>\n            : undefined)\n\n      const hasPrependInner = slots['prepend-inner'] || prependInnerControl\n\n      return (\n        <VTextField\n          ref={ vTextFieldRef }\n          v-model={ model.value }\n          onBeforeinput={ onBeforeinput }\n          onChange={ clampModel }\n          onKeydown={ onKeydown }\n          class={[\n            'v-number-input',\n            {\n              'v-number-input--default': controlVariant.value === 'default',\n              'v-number-input--hide-input': props.hideInput,\n              'v-number-input--inset': props.inset,\n              'v-number-input--reverse': props.reverse,\n              'v-number-input--split': controlVariant.value === 'split',\n              'v-number-input--stacked': controlVariant.value === 'stacked',\n            },\n            props.class,\n          ]}\n          { ...textFieldProps }\n          style={ props.style }\n          inputmode=\"decimal\"\n        >\n          {{\n            ...slots,\n            'append-inner': hasAppendInner ? (...args) => (\n              <>\n                { slots['append-inner']?.(...args) }\n                { appendInnerControl }\n              </>\n            ) : undefined,\n            'prepend-inner': hasPrependInner ? (...args) => (\n              <>\n                { prependInnerControl }\n                { slots['prepend-inner']?.(...args) }\n              </>\n            ) : undefined,\n          }}\n        </VTextField>\n      )\n    })\n\n    return forwardRefs({}, vTextFieldRef)\n  },\n})\n\nexport type VNumberInput = InstanceType<typeof VNumberInput>\n"],
  "mappings": "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",
  "names": ["makeVNumberInputProps", "propsFactory", "controlVariant", "type", "String", "default", "inset", "Boolean", "hideInput", "modelValue", "Number", "min", "MIN_SAFE_INTEGER", "max", "MAX_SAFE_INTEGER", "step", "omit", "makeVTextFieldProps", "VNumberInput", "genericComponent", "name", "props", "emits", "val", "setup", "_ref", "slots", "_model", "useProxiedModel", "model", "computed", "get", "value", "set", "isNaN", "vTextFieldRef", "ref", "stepDecimals", "getDecimals", "modelDecimals", "form", "useForm", "controlsDisabled", "disabled", "readonly", "isReadonly", "canIncrease", "canDecrease", "incrementIcon", "decrementIcon", "controlNodeSize", "controlNodeDefaultHeight", "incrementSlotProps", "click", "onClickUp", "decrementSlotProps", "onClickDown", "onMounted", "clampModel", "toggleUpDown", "increment", "arguments", "length", "undefined", "clamp", "decimals", "Math", "toFixed", "e", "stopPropagation", "onBeforeinput", "data", "existingTxt", "target", "selectionStart", "selectionEnd", "potentialNewInputVal", "slice", "test", "preventDefault", "onKeydown", "includes", "key", "ctrlKey", "nextTick", "onControlMousedown", "inputText", "useRender", "_", "textFieldProps", "VTextField", "filterProps", "incrementControlNode", "_createVNode", "VBtn", "VDefaultsProvider", "flat", "height", "size", "icon", "decrementControlNode", "decrement", "controlNode", "VDivider", "dividerNode", "appendInnerControl", "reverse", "_Fragment", "hasAppendInner", "prependInnerControl", "hasPrependInner", "_mergeProps", "$event", "class", "style", "_len", "args", "Array", "_key", "_len2", "_key2", "forwardRefs"]
}
